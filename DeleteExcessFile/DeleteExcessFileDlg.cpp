
// DeleteExcessFileDlg.cpp : 实现文件
//

#include "stdafx.h"
#include "DeleteExcessFile.h"
#include "DeleteExcessFileDlg.h"
#include "afxdialogex.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif



// CDeleteExcessFileDlg 对话框




CDeleteExcessFileDlg::CDeleteExcessFileDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CDeleteExcessFileDlg::IDD, pParent),
    m_pDeleteAddEdit(NULL),m_pDeleteShowEdit(NULL),m_pSelectDIrEdit(NULL)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);


}

void CDeleteExcessFileDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CDeleteExcessFileDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
    ON_BN_CLICKED(IDC_SELECTDIRBUTTON, &CDeleteExcessFileDlg::OnBnClickedSeletedirbutton)
    ON_BN_CLICKED(IDC_DELETEADDBUTTON, &CDeleteExcessFileDlg::OnBnClickedDeleteaddbutton)
    ON_BN_CLICKED(IDC_EXECUTEBUTTON, &CDeleteExcessFileDlg::OnBnClickedExecutebutton)
END_MESSAGE_MAP()


// CDeleteExcessFileDlg 消息处理程序

BOOL CDeleteExcessFileDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 将“关于...”菜单项添加到系统菜单中。

	// IDM_ABOUTBOX 必须在系统命令范围内。
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 设置此对话框的图标。当应用程序主窗口不是对话框时，框架将自动
	//  执行此操作
	SetIcon(m_hIcon, TRUE);			// 设置大图标
	SetIcon(m_hIcon, FALSE);		// 设置小图标

	// TODO: 在此添加额外的初始化代码

    //  先找出各个edit框的指针
    m_pSelectDIrEdit = static_cast<CEdit*>(GetDlgItem(IDC_SELECTDIREDIT));
    m_pDeleteAddEdit = static_cast<CEdit*>(GetDlgItem(IDC_DELETEADDEDIT));
    m_pDeleteShowEdit = static_cast<CEdit*>(GetDlgItem(IDC_DELETESHOWEDIT));

    ASSERT(m_pSelectDIrEdit && "EditControl is NULL");
    ASSERT(m_pDeleteAddEdit && "EditControl is NULL");
    ASSERT(m_pDeleteShowEdit && "EditControl is NULL");

    // 确定所有按钮指针
    m_arrButton[CBUTTON_DELETE_ADD] = static_cast<CButton*>(GetDlgItem(IDC_DELETEADDBUTTON));
    m_arrButton[CBUTTON_SELECT_DIR] = static_cast<CButton*>(GetDlgItem(IDC_SELECTDIRBUTTON));
    m_arrButton[CBUTTON_EXECUTE] = static_cast<CButton*>(GetDlgItem(IDC_EXECUTEBUTTON));
    ASSERT(m_arrButton[CBUTTON_DELETE_ADD] && "ButtonControl is NULL");
    ASSERT(m_arrButton[CBUTTON_SELECT_DIR] && "ButtonControl is NULL");
    ASSERT(m_arrButton[CBUTTON_EXECUTE] && "ButtonControl is NULL");

	return TRUE;  // 除非将焦点设置到控件，否则返回 TRUE
}

void CDeleteExcessFileDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
		CDialogEx::OnSysCommand(nID, lParam);
}

// 如果向对话框添加最小化按钮，则需要下面的代码
//  来绘制该图标。对于使用文档/视图模型的 MFC 应用程序，
//  这将由框架自动完成。

void CDeleteExcessFileDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 用于绘制的设备上下文

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 使图标在工作区矩形中居中
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 绘制图标
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

//当用户拖动最小化窗口时系统调用此函数取得光标
//显示。
HCURSOR CDeleteExcessFileDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CDeleteExcessFileDlg::OnBnClickedSeletedirbutton()
{
    // TODO: Add your control notification handler code here
    TCHAR szPath[MAX_PATH];     //存放选择的目录路径 
    CString str;

    BROWSEINFO bi;   
    bi.hwndOwner = m_hWnd;   
    bi.pidlRoot = NULL;   
    bi.pszDisplayName = szPath;   
    bi.lpszTitle = L"请选择需要打包的目录：";   
    bi.ulFlags = 0;   
    bi.lpfn = NULL;   
    bi.lParam = 0;   
    bi.iImage = 0;   
    //弹出选择目录对话框
    LPITEMIDLIST lp = SHBrowseForFolder(&bi); 

    if(lp && SHGetPathFromIDList(lp, szPath))
    {
        m_pSelectDIrEdit->SetWindowText(szPath);
    }

}


void CDeleteExcessFileDlg::OnBnClickedDeleteaddbutton()
{
    // TODO: Add your control notification handler code here
    CString strType;
    m_pDeleteAddEdit->GetWindowText(strType);
    // 检查空和是否已经存在
    if(!strType.IsEmpty() && !m_cOperation.CheckDuplicate(m_vecType, strType))
    {
        m_vecType.push_back(strType);
    }
    // 刷新显示区
    m_cOperation.UpdateShowEdit(m_vecType, m_pDeleteShowEdit);
    // 清空添加过滤类型edit
    m_pDeleteAddEdit->SetWindowText(_T(""));
}


void CDeleteExcessFileDlg::OnBnClickedExecutebutton()
{
    // TODO: Add your control notification handler code here
    CString strDir;
    m_pSelectDIrEdit->GetWindowText(strDir);
    if(strDir.IsEmpty()) return;
    DisableAllButton();
    m_cOperation.FindBmpFile(m_vecType, strDir);
    EnableAllButton();
}

void CDeleteExcessFileDlg::DisableAllButton()
{
    size_t len = sizeof(m_arrButton)/sizeof(m_arrButton[0]);
    for(size_t i = 0; i < len; i++)
    {
        m_arrButton[i]->EnableWindow(FALSE);
    }
}
void CDeleteExcessFileDlg::EnableAllButton()
{
    size_t len = sizeof(m_arrButton)/sizeof(m_arrButton[0]);
    for(size_t i = 0; i < len; i++)
    {
        m_arrButton[i]->EnableWindow(TRUE);
    }
}